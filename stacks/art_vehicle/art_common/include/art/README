UTM.h -- converts between lat/long and Universal Transverse Mercator Coordinates (UTM
conversions.h -- holds some very simple unit conversion aids and converts between unts
epsilon.h -- holds some error difference trhesholds for calculations. Also has an Almost Equal function
              using these error values, but is not recommeneded to use
filter.h -- uses an exponentially weighte moving average filter smoothing function following recurrence: a*x_k + (1-a)*y_{k-1}
            the closer a is to zero the greater smoothing effect and the less responsive the smoothing. Uses number of periods to
            prevent over-reliance on early observations
frames.h -- creates frames of reference from Earth to cameras and transforms parameters to new frames
infinity.h -- constants to represent infinity
pid2.h -  PID (Proportional, Integral, Derivative) control output., dont really understand it
polynomial.h -- A basic polynomial class. starts as 0 polynomial. You can add coefficients and evaluate at x-values
steering.h -- calculates steering angle (in degrees) for a given speed and yawrate using the bicycle method. This means the two front wheels
              are abstracted into one single wheel. We examine the car as a triange where there is a point at the center of the
              vehicle's turnig circle (A), at the midpoint of the the rear axle (B), and at the midpoint of the front axle (C),
              where AB is the radius of the turning circle. This is a right triangle where the hypotnuse is line segment AC. From this
              triangle, the measure of angle BAC equals the measure of the angle between the midline of the vehicle and the front wheel.
              From this we glean a few ewuations
              --> tan(steering angle) = BC/AB = a/r where a is length of the vehicle
              We can also estimate radius (r) for a given yawspeed (y), konwn as rotational velocity, assuming constant velocity (v):
              --> y = (2*pi radians) / (2*pi*r/v seconds)
              --> y = v/r radians/second
              --> r = v/y
              Using these equations this code has functions for calculating the steer degrees suing yawspeed, velocity and length,, and
              a function to do the inverse: calculate yawspee using steer degrees, velocity, length. At the end the code calculates max yaw
              using the steer speed minimum and the max steer degrees of the vehicle.
